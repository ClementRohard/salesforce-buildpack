#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

### Configure environment
# Debug, echo every command
#set -x
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Configure salesforce directories
SALESFORCE_DIR_NAME=".salesforce"
SALESFORCE_DIR=$BUILD_DIR/$SALESFORCE_DIR_NAME
SALESFORCE_CACHE_DIR=$CACHE_DIR/$SALESFORCE_DIR_NAME

### Load dependencies
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/node.sh
source $BP_DIR/lib/libs.sh

echo ""
highlight "Welcome to Salesforce Buildpack!!"
echo ""

# present of files below determine how we handle deployment
if [ -f $1/salesforce/src/package.xml ]; then
    log "Found Force.com Metadata API project"
    export SALESFORCE_WORKSPACE=false
elif [ -f $1/config.json ]; then
    log "Found Force.com workspace project"
    export SALESFORCE_WORKSPACE=true
fi


###   E X P O R T   C O N F I G   V A R S
log "Exporting config vars to environment..."
export_env_dir

# set defaults for optional config vars
if [[ ! -v SALESFORCE_BYOO ]]; then
   export SALESFORCE_BYOO="false"
fi

if [[ ! -v SALESFORCE_BUILDPACK_VERBOSE ]]; then
   export SALESFORCE_BUILDPACK_VERBOSE="false"
fi

if [[ ! -v SALESFORCE_BUILDPACK_DEBUG ]]; then
   export SALESFORCE_BUILDPACK_DEBUG="false"
fi

mkdir -p $SALESFORCE_DIR
export SALESFORCE_DIR=$SALESFORCE_DIR


###   H E R O K U   C L I
status "Installing Heroku CLI and Salesforce plugins"

# vendor directories
VENDORED_HEROKU_CLI="vendor/heroku-cli"

# download and extract the client tarball
rm -rf "$BUILD_DIR/$VENDORED_HEROKU_CLI"
mkdir -p "$BUILD_DIR/$VENDORED_HEROKU_CLI"
cd "$BUILD_DIR/$VENDORED_HEROKU_CLI"

#: ${HEROKU_CLI_URL:="https://cli-assets.heroku.com/branches/stable/5.2.40-09fa7ac/heroku-v5.2.40-09fa7ac-linux-amd64.tar.xz"}
: ${HEROKU_CLI_URL:="https://cli-assets.heroku.com/branches/stable/5.4.1-ae9db27/heroku-v5.4.1-ae9db27-linux-amd64.tar.xz"}
if [[ -z "$(which wget)" ]]; then
  curl -s $HEROKU_CLI_URL | tar xJf -
else
  wget -qO- $HEROKU_CLI_URL | tar xJf -
fi

export PATH="$PATH:$BUILD_DIR/$VENDORED_HEROKU_CLI/heroku/bin"
export XDG_DATA_HOME="$BUILD_DIR/.local"
export XDG_CACHE_HOME="$BUILD_DIR/.cache"

# touch autoupdate file to prevent 'heroku update' (which breaks
# tar as 'heroku update' alters what is being tar'd)
mkdir -p $XDG_CACHE_HOME/heroku
touch $XDG_CACHE_HOME/heroku/autoupdate

# install plugins
: ${SALESFORCE_APPCLOUD_TOOLBET_DIST_TAG:="latest"}
: ${SALESFORCE_FORCE_COM_CLI_DIST_TAG:="latest"}
heroku plugins:install salesforce-alm-buildpack-dev@$SALESFORCE_APPCLOUD_TOOLBET_DIST_TAG
heroku plugins:install force-cli-dev@$SALESFORCE_FORCE_COM_CLI_DIST_TAG
heroku plugins

status "Heroku CLI and Salesforce plugins installation complete"


###   N O D E
# install node, if not already present
install_nodejs $SALESFORCE_CACHE_DIR
# Put node in build dir since the cache is not available at time of deploy
cp -a $SALESFORCE_CACHE_DIR/node $SALESFORCE_DIR/node
export PATH="$SALESFORCE_DIR/node/bin":$PATH

# re-use node modules installed w/ plugins
export NODE_PATH=$XDG_DATA_HOME/heroku/plugins/node_modules

status "Installing node modules..."
cp -R $BP_DIR/lib/* $SALESFORCE_DIR/
cp $BP_DIR/package.json $XDG_DATA_HOME/heroku/plugins/package.json
cd $XDG_DATA_HOME/heroku/plugins
npm install --only=production | indent

# double-check that node is installed
if [ ! -f $SALESFORCE_DIR/node/bin/node ]; then
    error "Node not found at $SALESFORCE_DIR/node/bin/node"
fi

# install secret tool used by appcloud
# FIXME: disabled until we enable encryption on toolbelt
#install_libsecret


###   C O M P I L E
# disable process.exit calls
export APPCLOUD_SOFT_EXIT=true;
# delegate actual source deployment to node script
: ${SALESFORCE_BYPASS_COMPILE:="false"}
export SALESFORCE_DEPLOY_DIR="$SALESFORCE_DIR"
if [ "$SALESFORCE_BYPASS_COMPILE" == "false" ]; then
    status "Invoking $SALESFORCE_DIR_NAME/force.js compile phase..."
    $SALESFORCE_DIR/node/bin/node $SALESFORCE_DIR/force.js compile
else
    # bypass when the add-on created org is not used, eg Review app aren't used by Test Runner
    status "Bypassing compile phase."
fi


###   W R I T E   E N V   P R O F I L E   S C R I P T
# write env script to set various vars so release and test scripts
# can use heroku cli and plugins
export SALESFORCE_DEPLOY_DIR="\$HOME/$SALESFORCE_DIR_NAME"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/salesforce-env.sh
# set path so release and customer scripts and use heroku cli and node exes
export PATH="\$PATH:\$HOME/$VENDORED_HEROKU_CLI/heroku/bin:\$HOME/$SALESFORCE_DIR_NAME/node/bin"
# set so heroku cli can re-use plugins
export XDG_DATA_HOME="\$HOME/.local"
# set so heroku cli can see heroku/autoupdate to not trigger update
export XDG_CACHE_HOME="\$HOME/.cache"
# set so appcloud plugin can use for encryption
export APPCLOUD_SECRET_TOOL_PATH="\$HOME/.apt/usr/bin/secret-tool"
# set so appcloud plugin sets exitCode instead of invoking exit()
export APPCLOUD_SOFT_EXIT=$APPCLOUD_SOFT_EXIT
# set so appcloud plugin knows where deployment zip resides
export SALESFORCE_DEPLOY_DIR="\$HOME/$SALESFORCE_DIR_NAME"
# set node path to shared modules
export NODE_PATH="\$XDG_DATA_HOME/heroku/plugins/node_modules"

# log SALESFORCE_ and HEROKU_ config vars
if [ "\$SALESFORCE_BUILDPACK_DEBUG" == "true" ]; then
    echo "[DEBUG] PATH=\$PATH"
    for e in \$(env | grep '^SALESFORCE_\|^HEROKU_\|^APPCLOUD_\|^XDG_\|^NODE_'); do
        echo "[DEBUG] \$e"
    done
fi

# setup env to support appcloud and force.com plugin commands
mkdir -p .local/.appcloud
$SALESFORCE_DIR_NAME/node/bin/node $SALESFORCE_DIR_NAME/force.js setup

EOF

chmod +x $BUILD_DIR/.profile.d/salesforce-env.sh
if [ "$SALESFORCE_BUILDPACK_DEBUG" == "true" ]; then
    debug "$BUILD_DIR/.profile.d/salesforce-env.sh:"
    debug "`cat $BUILD_DIR/.profile.d/salesforce-env.sh`"
fi


###   R E L E A S E   S C R I P T
# write script triggering node-based deployment to-be-invoked bin/release
cat <<EOF >$SALESFORCE_DIR/deploy
$SALESFORCE_DIR_NAME/node/bin/node $SALESFORCE_DIR_NAME/force.js release

EOF
status "Generated '$SALESFORCE_DIR_NAME/deploy' node script to be called in release phase to deploy source to target org (SALESFORCE_URL)"

chmod +x $SALESFORCE_DIR/deploy
if [ "$SALESFORCE_BUILDPACK_DEBUG" == "true" ]; then
    debug "$SALESFORCE_DIR/deploy:"
    debug "`cat $SALESFORCE_DIR/deploy`"
fi


###   F I N A L   N O T E S
highlight "    "
highlight "### N O T E ###"
highlight "Heroku CLI and Salesforce plugins were installed for use in release and test phase scripts."
highlight "    "
highlight "To DEPLOY source to org, to invoke 'node $SALESFORCE_DIR_NAME/deploy' in Procfile or in your release phase script."
highlight "To TEST, invoke Salesforce CLI test commands (force:apex:test or force:test) in the test section of your app.json.  Eg:"
highlight "    $ heroku force:apex:test [params]"
highlight "    "
highlight "To use Salesforce CLI commands, source in '.profile.d/salesforce-env.sh' to ensure environment is properly setup."
highlight "###############"
highlight "    "


highlight "DONE!  Completed in $(($SECONDS - $START_TIME))s"
