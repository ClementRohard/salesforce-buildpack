#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Configure salesforce directories
SALESFORCE_DIR_NAME=".salesforce"
SALESFORCE_DIR=$BUILD_DIR/$SALESFORCE_DIR_NAME
SALESFORCE_CACHE_DIR=$CACHE_DIR/$SALESFORCE_DIR_NAME

### Load dependencies
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/node.sh
source $BP_DIR/lib/libs.sh

echo ""
highlight "Welcome to Salesforce Buildpack!!"
echo ""

# present of files below determine how we handle deployment
if [ -f $1/salesforce/src/package.xml ]; then
    log "Found Force.com Metadata API project"
    export SALESFORCE_WORKSPACE=false
elif [ -f $1/config.json ]; then
    log "Found Force.com workspace project"
    export SALESFORCE_WORKSPACE=true
fi

### Compile
status "Exporting config vars to environment"
export_env_dir

mkdir -p $SALESFORCE_DIR
export SALESFORCE_DIR=$SALESFORCE_DIR

# REVIEWME: probably can remove if we use nodejs buildpack
install_nodejs $SALESFORCE_CACHE_DIR
# Put node in build dir since the cache is not available at time of deploy
cp -a $SALESFORCE_CACHE_DIR/node $SALESFORCE_DIR/node
export PATH="$SALESFORCE_DIR/node/bin":$PATH

# set defaults for optional config vars
if [[ ! -v SALESFORCE_BYOO ]]; then
   export SALESFORCE_BYOO="false"
fi

if [[ ! -v SALESFORCE_BUILDPACK_VERBOSE ]]; then
   export SALESFORCE_BUILDPACK_VERBOSE="false"
fi

# FIXME: workaround for HEROKU_APP_NAME not provided by staging app
if [[ ! -v HEROKU_APP_NAME ]]; then
   export HEROKU_APP_NAME="App Name Unknown"
fi

status "Generating release phase deploy script to $SALESFORCE_DIR_NAME/deploy"
cp -R $BP_DIR/lib/* $SALESFORCE_DIR/
cp $BP_DIR/package.json $SALESFORCE_DIR/package.json
# write script triggering node-based deployment to-be-invoked bin/release
cat <<EOF >$SALESFORCE_DIR/deploy
export SALESFORCE_WORKSPACE="$SALESFORCE_WORKSPACE"
export SALESFORCE_BYOO="$SALESFORCE_BYOO"
export SALESFORCE_BUILDPACK_VERBOSE="$SALESFORCE_BUILDPACK_VERBOSE"
# relative dir as BUILD_DIR not same in release phase
export SALESFORCE_DIR="$SALESFORCE_DIR_NAME"
# not needed for release, but adding until release is broken out from force.js
export HEROKU_APP_NAME="$HEROKU_APP_NAME"
$SALESFORCE_DIR_NAME/node/bin/node $SALESFORCE_DIR_NAME/force.js release
EOF

chmod +x $SALESFORCE_DIR/deploy
if [ "$SALESFORCE_BUILDPACK_VERBOSE" == "true" ]; then
    debug "Script: `cat $SALESFORCE_DIR/deploy`"
fi

status "Installing node modules..."
cd $SALESFORCE_DIR
npm install | indent

# double-check that node is installed
if [ ! -f $SALESFORCE_DIR/node/bin/node ]; then
    error "! Node not found at $SALESFORCE_DIR/node/bin/node"
fi

# install secret tool used by appcloud
# FIXME: disabled for now
#install_libsecret

# delegate actual source deployment to node script
export XDG_DATA_HOME="$SALESFORCE_DIR"
status "Invoking $SALESFORCE_DIR/force.js compile phase..."
$SALESFORCE_DIR/node/bin/node $SALESFORCE_DIR/force.js compile

#ls -l /app/.appcloud
#cp -r /app/.appcloud $SALESFORCE_DIR_NAME
#ls -l $SALESFORCE_DIR_NAME/*.*

DEPLOY_MSG="To DEPLOY source to org, configure your application to invoke '$SALESFORCE_DIR_NAME/deploy' in your release phase script."

ls $BUILD_DIR/$VENDORED_HEROKU_CLI/heroku/*
export PATH="$PATH:$BUILD_DIR/$VENDORED_HEROKU_CLI/heroku/bin"
echo "PATH=$PATH"
#HEROKU_PATH=vendor/heroku-toolbelt/bin
#HEROKU_CLIENT="$HEROKU_PATH/heroku"
HEROKU_CLIENT="heroku"
if type "$HEROKU_CLIENT" &> /dev/null; then
    log "Found Heroku CLI at $HEROKU_CLIENT"
    status "Installing AppCloud Plugin..."
    # FIXME: change to salesforce-alm
    #$HEROKU_CLIENT plugins:install salesforce-alm-dev
    #$HEROKU_CLIENT plugins
    #$HEROKU_CLIENT --help
    #$HEROKU_CLIENT force --help
    highlight "### N O T E ###"
    highlight "$DEPLOY_MSG"
    highlight "To TEST, configure your app to invoke AppCloud Plugin test commands (force:apex:test or force:test) in the test section of your app.json.  Eg:"
    highlight "    $ heroku force:apex:test [params]"
    highlight "To IMPORT DATA into the org, configure your app to invoke AppCloud Plugin data command (force:data:import) in your release phase script.  Eg:"
    highlight "    $ heroku force:data:import [params]"
    highlight "###############"
else
    log "Heroku CLI not found."
    log "To use AppCloud Plugin commands in test and release phases, add 'heroku-buildpack-toolbelt' buildpack to app."

    status "Generating test phase script to $SALESFORCE_DIR_NAME/test"
    # write script to-be-invoked via test phase per app.json
    cat <<EOF >$SALESFORCE_DIR/test
export SALESFORCE_WORKSPACE="$SALESFORCE_WORKSPACE"
export SALESFORCE_BYOO="$SALESFORCE_BYOO"
export SALESFORCE_BUILDPACK_VERBOSE="$SALESFORCE_BUILDPACK_VERBOSE"
# relative dir as BUILD_DIR not same in test phase
export SALESFORCE_DIR="$SALESFORCE_DIR_NAME"
export HEROKU_APP_NAME="$HEROKU_APP_NAME"
$SALESFORCE_DIR_NAME/node/bin/node $SALESFORCE_DIR_NAME/force.js test
EOF
    chmod +x $SALESFORCE_DIR/test
    if [ "$SALESFORCE_BUILDPACK_VERBOSE" == "true" ]; then
        debug "Script: `cat $SALESFORCE_DIR/test`"
    fi

    echo ""
    highlight "$DEPLOY_MSG"
    highlight "To run all Apex tests, configure your app to invoke '$SALESFORCE_DIR_NAME/test' via 'test' in your app.json."
fi

highlight "DONE!  Completed in $(($SECONDS - $START_TIME))s"
