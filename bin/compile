#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Configure salesforce directories
SALESFORCE_DIR_NAME=".salesforce"
SALESFORCE_DIR=$BUILD_DIR/$SALESFORCE_DIR_NAME
SALESFORCE_CACHE_DIR=$CACHE_DIR/$SALESFORCE_DIR_NAME

### Load dependencies

source $BP_DIR/lib/common.sh
source $BP_DIR/lib/node.sh

### Compile

status "Exporting config vars to environment"
export_env_dir

mkdir -p $SALESFORCE_DIR

install_nodejs $SALESFORCE_CACHE_DIR

status "Coping deploy script to .salesforce/deploy"
cp $BP_DIR/lib/deploy.js $SALESFORCE_DIR/deploy.js
cp $BP_DIR/package.json $SALESFORCE_DIR/package.json

echo "$SALESFORCE_CACHE_DIR/node/bin/node .salesforce/deploy.js" > $SALESFORCE_DIR/deploy
chmod +x $SALESFORCE_DIR/deploy

status "Installing modules"
cd $SALESFORCE_DIR
npm install | indent

# Allow the user to specify the salesforce source. We only want to zip one
# level above the source, and zip includes relative paths. So we first cd one
# level above, the SRC_DIR, then zip the source folder, the SRC_FOLDER.
SRC_PATH=${SALESFORCE_SRC_PATH:-"salesforce/src"}
SRC_DIR=$(dirname $SRC_PATH)
SRC_FOLDER=$(basename $SRC_PATH)

status "Building ZIP from $SRC_DIR to $SALESFORCE_DIR_NAME/src.zip"
rm -f $SALESFORCE_DIR/src.zip
cd $BUILD_DIR/$SRC_DIR
zip -r $SALESFORCE_DIR/src.zip $SRC_FOLDER | indent

echo ""
echo "Configure your application to invoke '$SALESFORCE_DIR_NAME/deploy' in your release phase script or Procfile"
